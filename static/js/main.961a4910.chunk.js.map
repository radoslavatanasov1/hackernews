{"version":3,"sources":["context.js","SetupForm.js","Loading.js","Modal.js","App.js","index.js"],"names":["table","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","amount","category","difficulty","quiz","setQuiz","isModalOpen","setIsModalOpen","fetchQuestions","url","a","axios","catch","err","console","log","response","data","results","length","nextQuestion","oldIndex","openModal","Provider","value","checkAnswer","oldState","closeModal","handleChange","e","name","target","handleSubmit","preventDefault","useGlobalContext","useContext","SetupForm","className","htmlFor","type","id","onChange","min","max","onClick","Loading","Modal","toFixed","App","question","incorrect_answers","correct_answer","answers","tempIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.961a4910.chunk.js","sourcesContent":["import axios from 'axios'\nimport React, { useState, useContext, useEffect } from 'react'\n\nconst table = {\n  sports: 21,\n  history: 23,\n  politics: 24,\n}\n\nconst API_ENDPOINT = 'https://opentdb.com/api.php?'\n\nconst url = ''\nconst tempUrl =\n  'https://opentdb.com/api.php?amount=10&category=21&difficulty=easy&type=multiple'\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  const [waiting, setWaiting] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState([])\n  const [index, setIndex] = useState(0)\n  const [correct, setCorrect] = useState(0)\n  const [error, setError] = useState(false)\n  const [quiz, setQuiz] = useState({\n    amount: 10,\n    category: 'sports',\n    difficulty: 'easy',\n  })\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  const fetchQuestions = async (url) => {\n    setLoading(true)\n    setWaiting(false)\n    const response = await axios(url).catch((err) => console.log(err))\n    if (response) {\n      const data = response.data.results\n      if (data.length > 0) {\n        setQuestions(data)\n        setLoading(false)\n        setWaiting(false)\n        setError(false)\n      } else {\n        setWaiting(true)\n        setError(true)\n      }\n    } else {\n      setWaiting(true)\n    }\n  }\n\n  const nextQuestion = () => {\n    setIndex((oldIndex) => {\n      const index = oldIndex + 1\n      if (index > questions.length - 1) {\n        openModal()\n        return 0\n      } else {\n        return index\n      }\n    })\n  }\n  const checkAnswer = (value) => {\n    if (value) {\n      setCorrect((oldState) => oldState + 1)\n    }\n    nextQuestion()\n  }\n\n  const openModal = () => {\n    setIsModalOpen(true)\n  }\n  const closeModal = () => {\n    setWaiting(true)\n    setCorrect(0)\n    setIsModalOpen(false)\n  }\n  const handleChange = (e) => {\n    const name = e.target.name\n    const value = e.target.value\n    setQuiz({ ...quiz, [name]: value })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const { amount, category, difficulty } = quiz\n\n    const url = `${API_ENDPOINT}amount=${amount}&difficulty=${difficulty}&category=${table[category]}&type=multiple`\n    fetchQuestions(url)\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        waiting,\n        loading,\n        questions,\n        index,\n        correct,\n        error,\n        isModalOpen,\n        nextQuestion,\n        checkAnswer,\n        closeModal,\n        quiz,\n        handleChange,\n        handleSubmit,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n","import React from 'react'\nimport { useGlobalContext } from './context'\n\nconst SetupForm = () => {\n  const { quiz, handleChange, handleSubmit, error } = useGlobalContext()\n  return (\n    <main>\n      <section className='quiz quiz-small'>\n        <form className='setup-form'>\n          <h2>setup quiz</h2>\n          {/* amount */}\n          <div className='form-control'>\n            <label htmlFor='amount'>number of questions</label>\n            <input\n              type='number'\n              name='amount'\n              id='amount'\n              value={quiz.amount}\n              onChange={handleChange}\n              className='form-input'\n              min={1}\n              max={50}\n            />\n          </div>\n          {/* category */}\n\n          <div className='form-control'>\n            <label htmlFor='category'>category</label>\n            <select\n              name='category'\n              id='category'\n              className='form-input'\n              value={quiz.category}\n              onChange={handleChange}\n            >\n              <option value='sports'>sports</option>\n              <option value='history'>history</option>\n              <option value='politics'>politics</option>\n            </select>\n          </div>\n          {/* difficulty */}\n\n          <div className='form-control'>\n            <label htmlFor='difficulty'>select difficulty</label>\n            <select\n              name='difficulty'\n              id='difficulty'\n              className='form-input'\n              value={quiz.difficulty}\n              onChange={handleChange}\n            >\n              <option value='easy'>easy</option>\n              <option value='medium'>medium</option>\n              <option value='hard'>hard</option>\n            </select>\n          </div>\n          {error && (\n            <p className='error'>\n              can't generate questions, please try different options\n            </p>\n          )}\n          <button type='submit' onClick={handleSubmit} className='submit-btn'>\n            start\n          </button>\n        </form>\n      </section>\n    </main>\n  )\n}\n\nexport default SetupForm\n","import React from 'react'\n\nconst Loading = () => {\n  return (\n    <main>\n      <div className='loading'></div>\n    </main>\n  )\n}\n\nexport default Loading\n","import React from 'react'\nimport { useGlobalContext } from './context'\n\nconst Modal = () => {\n  const { isModalOpen, closeModal, correct, questions } = useGlobalContext()\n  return (\n    <div\n      className={`${\n        isModalOpen ? 'modal-container isOpen' : 'modal-container'\n      }`}\n    >\n      <div className='modal-content'>\n        <h2>congrats!</h2>\n        <p>\n          You answered {((correct / questions.length) * 100).toFixed(0)}% of\n          questions correctly\n        </p>\n        <button className='close-btn' onClick={closeModal}>\n          play again\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Modal\n","import React from 'react'\nimport { useGlobalContext } from './context'\n\nimport SetupForm from './SetupForm'\nimport Loading from './Loading'\nimport Modal from './Modal'\nfunction App() {\n  const {\n    waiting,\n    loading,\n    questions,\n    index,\n    correct,\n    nextQuestion,\n    checkAnswer,\n  } = useGlobalContext()\n  if (waiting) {\n    return <SetupForm />\n  }\n  if (loading) {\n    return <Loading />\n  }\n\n  const { question, incorrect_answers, correct_answer } = questions[index]\n  // const answers = [...incorrect_answers, correct_answer]\n  let answers = [...incorrect_answers]\n  const tempIndex = Math.floor(Math.random() * 4)\n  if (tempIndex === 3) {\n    answers.push(correct_answer)\n  } else {\n    answers.push(answers[tempIndex])\n    answers[tempIndex] = correct_answer\n  }\n  return (\n    <main>\n      <Modal />\n      <section className='quiz'>\n        <p className='correct-answers'>\n          correct answers : {correct}/{index}\n        </p>\n        <article className='container'>\n          <h2 dangerouslySetInnerHTML={{ __html: question }} />\n          <div className='btn-container'>\n            {answers.map((answer, index) => {\n              return (\n                <button\n                  key={index}\n                  className='answer-btn'\n                  onClick={() => checkAnswer(correct_answer === answer)}\n                  dangerouslySetInnerHTML={{ __html: answer }}\n                />\n              )\n            })}\n          </div>\n        </article>\n        <button className='next-question' onClick={nextQuestion}>\n          next question\n        </button>\n      </section>\n    </main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}